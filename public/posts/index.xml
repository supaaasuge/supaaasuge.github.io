<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Supaaasuge&#39;s Blog</title>
    <link>https://supaaasuge.github.io/posts/</link>
    <description>Recent content in Posts on Supaaasuge&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://supaaasuge.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Board Light - HackTheBox Writeup (Easy)</title>
      <link>https://supaaasuge.github.io/posts/board-light-htb/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/board-light-htb/</guid>
      <description>Machine Summary In this Hack The Box machine, I start of with basic Nmap enumeration. Then move on to directory enumeration and vhost enumeration using gobuster and ffuf. From here, we find an endpoint running Dollibarr v17.0.0 that is vulnerable to CVE-2023-30253. We are able to leverage this to get a reverse shell on the machine and get an initial foothold. From here, we find a password for the user larissa and are able to use these credentials to log in via SSH.</description>
    </item>
    
    <item>
      <title>L3AK CTF - Crypto On The Rocks</title>
      <link>https://supaaasuge.github.io/posts/l3ak-crypto-on-the-rocks/</link>
      <pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/l3ak-crypto-on-the-rocks/</guid>
      <description>Crypto on the Rocks Solution This challenge was inspired by CVE-2024-31497.
Within PuTTY, when utilizing the NIST P-521 elliptic curve, the implementation generates nonces with the first 9 bits set to zero. PuTTY&amp;rsquo;s technique worked by making a SHA-512 hash and then reducing it mod $q$, where $q$ is the order of the group used in the ECDSA system.
Introduction This challenge involves breaking the ECDSA (Elliptic Curve Digital Signature Algorithm) using a lattice-based attack.</description>
    </item>
    
    <item>
      <title>L3AK CTF - Pickled crypto vault</title>
      <link>https://supaaasuge.github.io/posts/l3ak-pickles-n-crypto/</link>
      <pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/l3ak-pickles-n-crypto/</guid>
      <description>Pickles and Crypto vault Difficulty: Easy Category: Web
Resources  exploit-notes.hdks - Python Pickle RCE Pickles deserialization RCE explaination  Description Pickles and crypto? What a concept.
This challenge involves a flask RESTful web application with endpoints for user registration, login, key upload, and decryption/encryption. The application uses JWT for authentication, RSA for encryption/decryption of user supplied data, and AES-CBC-256 for database security using a SHA256 hash of the user&amp;rsquo;s password as the AES key for RSA keys stored in-memory.</description>
    </item>
    
    <item>
      <title>How to setup Secure Boot on Arch Linux</title>
      <link>https://supaaasuge.github.io/posts/secure-boot-archlinux/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/secure-boot-archlinux/</guid>
      <description>Incomplete post&amp;hellip; Full writeup coming soon.
Resources  https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot https://man.archlinux.org/man/extra/sbctl/sbctl.8.en https://wiki.archlinux.org/title/User:Krin/Secure_Boot,_full_disk_encryption,_and_TPM2_unlocking_install https://github.com/Ataraxxia/secure-arch/blob/main/00_basic_system_installation.md https://wiki.archlinux.org/title/Dracut  </description>
    </item>
    
    <item>
      <title>0day - TryHackMe Writeup</title>
      <link>https://supaaasuge.github.io/posts/0day-thm/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/0day-thm/</guid>
      <description>0day is a Medium difficulty room from TryHackMe, I start off with a bit of enumeration before coming across a .cgi file on a particular endpoint that was vulnerable to ShellShock. Once I used ShellShock to get a foothold as www-data, I was able to perform further enumeration of the host. Due to the old Ubuntu version, I was able to then leverage CVE-2015-1328 to escalate my privileges to root.</description>
    </item>
    
    <item>
      <title>Antique - HTB Writeup</title>
      <link>https://supaaasuge.github.io/posts/antique-htb/</link>
      <pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/antique-htb/</guid>
      <description>Enumeration Starting off, I ran a nmap TCP scan on all ports. The only open port from this was 23(Telnet), so I then decided to try a UDP scan (-sU), in which port 161(SNMP) was found.
From here, I went ahead and connected to port 23 using telnet. HP JetDirect was the live service for this port, I am going to go ahead and search google for any exploits for HP JetDirect</description>
    </item>
    
    <item>
      <title>Bizness - HTB Writeup</title>
      <link>https://supaaasuge.github.io/posts/bizness-htb/</link>
      <pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/bizness-htb/</guid>
      <description>Bizness is a Easy Linux machine initially released on January 6th, 2024. As usual, I start with basic enumeration using Nmap; and from there used dirsearch for directory enumeration. From directory enumeration we find a login page running Apache OFBiz. This version of Apache OFBiz is vulnerable to an authentication bypass vulnerability CVE-2023-51497. From here, using a public PoC script found on github, we are then able to leverage CVE-2023-49070 to get remote code execution and get a shell on the machine as the ofbiz user.</description>
    </item>
    
    <item>
      <title>Breaking RSA - TryHackMe Writeup</title>
      <link>https://supaaasuge.github.io/posts/breaking-rsa/</link>
      <pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/breaking-rsa/</guid>
      <description>TryHackMe - Breaking RSA This room present&amp;rsquo;s an exercise in which a public RSA SSH key is given to you, the goal to complete this room is to successfully recover the private key and then use the recovered private key to authenticate via SSH. I began with nmap scanning, and after a bit of web directory enumeration, we find a RSA public key SSH entry. We then download this public key, extract n the public modulus, and e the public exponent, and attempt to factor n into it&amp;rsquo;s prime factors p and q.</description>
    </item>
    
    <item>
      <title>Builder - HTB Writeup</title>
      <link>https://supaaasuge.github.io/posts/builder-htb/</link>
      <pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/builder-htb/</guid>
      <description>This post is a writeup for Medium difficulty Hack The Box machine: Builder. In this lab, we leverage CVE-2024-23897 a Local File Inclusion vulnerability to gather credentials for the user jennifer. From here, after logging into the Jenkins instance we use Jennifer&amp;rsquo;s account privileges to manually reset the root user&amp;rsquo;s password. Which then allowed us to view/edit the SSH key information. From there, we use the SSH key to easily log into the machine and get the root flag!</description>
    </item>
    
    <item>
      <title>Devvortex - HTB Writeup</title>
      <link>https://supaaasuge.github.io/posts/devvortex-htb/</link>
      <pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/devvortex-htb/</guid>
      <description>In this post, I go over the path I took towards getting root on the Hack The Box machine: Devvortex(Easy). As usual we start out with an nmap port scan, where we discover a Joomla site hosted on port 80. After finding the version of Joomla being used and looking for public exploits, I leverage CVE-2023-23752(Unauthenticated Information Disclosure) to get credentials to login as the user lewis. From here, we are able to edit templates on the site and add in a PHP reverse shell to get a foothold on the machine as www-data.</description>
    </item>
    
    <item>
      <title>Trick - HTB Writeup</title>
      <link>https://supaaasuge.github.io/posts/trick-htb/</link>
      <pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/trick-htb/</guid>
      <description>Trick - HTB Writeup Difficulty: Easy
Enumeration Starting off, I ran an nmap scan on all open ports at a rate of 10000. Moving on from there, I ran a service version scan, TCP scan, and operating system detection scan on the ports that I discoverd.
nmap -p- --open --min-rate 10000 $IP # Nmap 7.94SVN scan initiated Mon May 6 14:32:07 2024 as: nmap -p- --open --min-rate 10000 -oN init.scan 10.</description>
    </item>
    
    <item>
      <title>Usage - HTB Writeup</title>
      <link>https://supaaasuge.github.io/posts/usage-htb/</link>
      <pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/usage-htb/</guid>
      <description>Usage - HTB Writeup IP = 10.10.11.18
Enumeration sudo nmap -p22,80 -sCV -A -Pn $IP [SNIP] ... PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 a0:f8:fd:d3:04:b8:07:a0:63:dd:37:df:d7:ee:ca:78 (ECDSA) |_ 256 bd:22:f5:28:77:27:fb:65:ba:f6:fd:2f:10:c7:82:8f (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Daily Blogs |_http-server-header: nginx/1.18.0 (Ubuntu) ... [SNIP] TRACEROUTE (using port 80/tcp) HOP RTT ADDRESS 1 37.18 ms 10.10.14.1 2 37.24 ms usage.</description>
    </item>
    
    <item>
      <title>Crypto - N00bzCTF23 Writeup</title>
      <link>https://supaaasuge.github.io/posts/n00bzctf23/</link>
      <pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/n00bzctf23/</guid>
      <description>N00bzCTF 2023 This challenge present&amp;rsquo;s a relatively simply RSA challenge, I had seen this before in PicoCTF so I was able to solve it pretty quickly, however this was unfortunately the only challenge I had time for that weekend as I was busy. Also, I sadly did not write down the name of the challenge and don&amp;rsquo;t care enough to go find it so&amp;hellip; Enjoy :)
Source Code from Crypto.Util.number import * import time flag = bytes_to_long(b&amp;#39;n00bz{***********************}&amp;#39;) e = 17 p = getPrime(1024) q = getPrime(1024) n = p*q ct = pow(flag,e,n) time.</description>
    </item>
    
    <item>
      <title>Electronical (Crypto) - BuckeyeCTF2023 Writeup</title>
      <link>https://supaaasuge.github.io/posts/electronical-buckeyectf2023/</link>
      <pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/electronical-buckeyectf2023/</guid>
      <description>Electronical (Crypto) - BuckEyeCTF23 Source Code:
from Crypto.Cipher import AES from flask import Flask, request, abort, send_file import math import os app = Flask(__name__) key = os.urandom(32) flag = os.environ.get(&amp;#39;FLAG&amp;#39;, &amp;#39;bctf{fake_flag_fake_flag_fake_flag_fake_flag}&amp;#39;) cipher = AES.new(key, AES.MODE_ECB) def encrypt(message: str) -&amp;gt; bytes: length = math.ceil(len(message) / 16) * 16 padded = message.encode().ljust(length, b&amp;#39;\0&amp;#39;) return cipher.encrypt(padded) @app.get(&amp;#39;/encrypt&amp;#39;) def handle_encrypt(): param = request.args.get(&amp;#39;message&amp;#39;) if not param: return abort(400, &amp;#34;Bad&amp;#34;) if not isinstance(param, str): return abort(400, &amp;#34;Bad&amp;#34;) return encrypt(param + flag).</description>
    </item>
    
    <item>
      <title>Nax - TryHackMe Writeup</title>
      <link>https://supaaasuge.github.io/posts/nax-thm/</link>
      <pubDate>Sat, 04 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/nax-thm/</guid>
      <description>Enumeration nmap -p- --min-rate 10000 --open 10.10.222.20 Ports open: 22, 25, 80, 443
Moving on to Service Version/TCP scan with vuilnerability detections scripts + OS detection:
sudo nmap -p22,25,80,443 -sCVT -O 10.10.222.20 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-04 23:45 EDT Nmap scan report for 10.10.222.20 Host is up (0.33s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 62:1d:d9:88:01:77:0a:52:bb:59:f9:da:c1:a6:e3:cd (RSA) | 256 af:67:7d:24:e5:95:f4:44:72:d1:0c:39:8d:cc:21:15 (ECDSA) |_ 256 20:28:15:ef:13:c8:9f:b8:a7:0f:50:e6:2f:3b:1e:57 (ED25519) 25/tcp open smtp Postfix smtpd |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=ubuntu | Not valid before: 2020-03-23T23:42:04 |_Not valid after: 2030-03-21T23:42:04 |_smtp-commands: ubuntu.</description>
    </item>
    
    <item>
      <title>OpenSource - HTB Writeup</title>
      <link>https://supaaasuge.github.io/posts/opensource-htb/</link>
      <pubDate>Sat, 04 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/opensource-htb/</guid>
      <description>OpenSource - HTB Writeup Difficulty: Medium
Enumeration Starting off, I ran a full port scan to find open ports:
nmap -p- --min-rate 10000 -Pn $IP -oG p-.scan ... $ cat p-.scan Host: 10.129.227.140 ()	Status: Up Host: 10.129.227.140 ()	Ports: 22/open/tcp//ssh///, 80/open/tcp//http/// # Nmap done at Mon May 6 17:30:07 2024 -- 1 IP address (1 host up) scanned in 81.90 seconds Ports: 22, 80. Moving on to a TCP + service version scan with operating system detection:</description>
    </item>
    
    <item>
      <title>Pilgrimmage - HTB Writeup</title>
      <link>https://supaaasuge.github.io/posts/pilgrimmage-htb/</link>
      <pubDate>Sat, 04 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/pilgrimmage-htb/</guid>
      <description>Pilgrimage - HTB Writeup IP=10.10.11.219
Enumeration nmap
export IP=10.10.11.219 nmap -p- --min-rate 10000 -Pn $IP PORT STATE SERVICE 22/tcp open ssh 80/tcp open http --- sudo nmap -p22,80 -sCVT -A -Pn $IP PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) | ssh-hostkey: | 3072 20:be:60:d2:95:f6:28:c1:b7:e9:e8:17:06:f1:68:f3 (RSA) | 256 0e:b6:a6:a8:c9:9b:41:73:74:6e:70:18:0d:5f:e0:af (ECDSA) |_ 256 d1:4e:29:3c:70:86:69:b4:d7:2c:c8:0b:48:6e:98:04 (ED25519) 80/tcp open http nginx 1.18.0 | http-git: | 10.10.11.219:80/.git/ | Git repository found!</description>
    </item>
    
    <item>
      <title>Socket - HTB Writeup</title>
      <link>https://supaaasuge.github.io/posts/socket-htb/</link>
      <pubDate>Sat, 04 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://supaaasuge.github.io/posts/socket-htb/</guid>
      <description>Socket - HTB Writeup Difficulty: Medium
IP=10.10.11.206
After the initial enumeration and finding open ports on 22, 80, 5789. We can try connecting to websockets running on port 5789 with wscat. Very quickly, we find a sqli vulnerability within the service. Which allows us the opportunity to get the admin password hash. Which is just simple MD5. After running this through crackstation.com, the password/username is: admin:denjanjade122566.
SQLMAP through proxy We already explored the /version path and extracted credentials with it due to a SQLi vulnerability, we can try now the same vulnerability but with the /update path.</description>
    </item>
    
  </channel>
</rss>
